USE mavenmovies;

-- 1. Rank the customers based on the total amount they've spent on rentals.
SELECT customer_id, CONCAT(first_name, ' ', last_name) AS customer_name, 
       SUM(payment.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(payment.amount) DESC) AS customer_rank
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY customer_id, customer_name
ORDER BY total_spent DESC;

-- 2. Calculate the cumulative revenue generated by each film over time.
SELECT film_id, title, SUM(payment.amount) AS cumulative_revenue
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
JOIN payment ON rental.rental_id = payment.rental_id
GROUP BY film_id, title
ORDER BY film_id; 

-- 3. Determine the average rental duration for movies in each length category (e.g., short, medium, long).
SELECT 
    CASE 
        WHEN film.length <= 60 THEN 'Short'
        WHEN film.length > 60 AND film.length <= 120 THEN 'Medium'
        ELSE 'Long'
    END AS length_category,
    AVG(DATEDIFF(rental.return_date, rental.rental_date)) AS avg_rental_duration
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY length_category;

-- 4. Identify the top 3 films in each category based on their rental counts.
SELECT category.name, film.title, COUNT(rental.rental_id) AS rental_count,
       ROW_NUMBER() OVER (PARTITION BY category.name ORDER BY COUNT(rental.rental_id) DESC) AS rank
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.name, film.title
HAVING rank <= 3;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
SELECT customer_id, CONCAT(first_name, ' ', last_name) AS customer_name, 
       (COUNT(rental.rental_id) - (SELECT AVG(rental_count) FROM (
           SELECT customer_id, COUNT(*) AS rental_count 
           FROM rental 
           GROUP BY customer_id
       ) AS customer_rentals)) AS rental_count_difference
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer_id, customer_name;

-- 6. Find the monthly revenue trend for the entire rental store over time.
SELECT MONTH(payment_date) AS month, YEAR(payment_date) AS year, SUM(amount) AS monthly_revenue
FROM payment
GROUP BY month, year
ORDER BY year, month;

-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
SELECT customer_id, CONCAT(first_name, ' ', last_name) AS customer_name, 
       SUM(payment.amount) AS total_spent
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY customer_id, customer_name
HAVING SUM(payment.amount) >= (
    SELECT PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY SUM(payment.amount)) 
    FROM customer
    JOIN payment ON customer.customer_id = payment.customer_id
    GROUP BY customer_id
);

-- 8. Calculate the running total of rentals per category, ordered by rental count.
SELECT category.name, COUNT(rental.rental_id) AS rental_count,
       SUM(COUNT(rental.rental_id)) OVER (ORDER BY COUNT(rental.rental_id)) AS running_total
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.inventory_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.name
ORDER BY rental_count;

-- 9. Find the films that have been rented less than the average rental count for their respective categories.
SELECT film.title, category.name, COUNT(rental.rental_id) AS rental_count,
       (SELECT AVG(rental_count) 
        FROM (
            SELECT category.name, COUNT(rental.rental_id) AS rental_count
            FROM category
            JOIN film_category ON category.category_id = film_category.category_id
            JOIN film ON film_category.film_id = film.film_id
            JOIN inventory ON film.film_id = inventory.inventory_id
            JOIN rental ON inventory.inventory_id = rental.inventory_id
            GROUP BY category.name
        ) AS category_avg_rentals 
        WHERE category_avg_rentals.name = category.name) AS avg_category_rentals
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
JOIN inventory ON film.film_id = inventory.inventory_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title, category.name
HAVING COUNT(rental.rental_id) < avg_category_rentals;

-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT MONTH(payment_date) AS month, YEAR(payment_date) AS year, SUM(amount) AS monthly_revenue
FROM payment
GROUP BY month, year
ORDER BY monthly_revenue DESC
LIMIT 5;
